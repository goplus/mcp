// Code generated by xgo (XGo); DO NOT EDIT.

package main

import (
	"github.com/goplus/mcp/mtest"
	"testing"
)

type case_calc struct {
	mtest.CaseApp
}
//line demo/calc/calc_mtest.gox:1
func (this *case_calc) Main() {
//line demo/calc/calc_mtest.gox:1:1
	this.Mock(new(MCPApp))
//line demo/calc/calc_mtest.gox:3:1
	this.Initialize(nil)
//line demo/calc/calc_mtest.gox:4:1
	this.RetWith(map[string]interface{}{})
//line demo/calc/calc_mtest.gox:6:1
	this.Call__0("calculate", map[string]any{"operation": "multiply", "x": 2, "y": 3})
//line demo/calc/calc_mtest.gox:7:1
	this.RetWith(map[string][]map[string]string{"content": []map[string]string{map[string]string{"text": "6", "type": "text"}}})
//line demo/calc/calc_mtest.gox:16:1
	this.Call__0("calculate", map[string]any{"operation": "add", "x": 2, "y": 3})
//line demo/calc/calc_mtest.gox:17:1
	this.RetWith(map[string][]map[string]string{"content": []map[string]string{map[string]string{"text": "5", "type": "text"}}})
//line demo/calc/calc_mtest.gox:26:1
	this.Call__0("calculate", map[string]any{"operation": "divide", "x": 2, "y": 0})
//line demo/calc/calc_mtest.gox:27:1
	this.RetWith(map[string]interface{}{"content": []map[string]string{map[string]string{"text": "cannot divide by zero", "type": "text"}}, "isError": true})
}
func Test_calc(t *testing.T) {
	mtest.Gopt_CaseApp_TestMain(new(case_calc), t)
}
