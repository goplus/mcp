// Code generated by xgo (XGo); DO NOT EDIT.

package main

import (
	"context"
	"github.com/goplus/mcp/server"
	"github.com/mark3labs/mcp-go/mcp"
	"github.com/qiniu/x/errors"
	"os"
)

const _ = true

type MCPApp struct {
	server.MCPApp
}
type readme struct {
	server.ResourceApp
	*MCPApp
}
type user_profile struct {
	server.ResourceApp
	*MCPApp
}
//line demo/resource/main_mcp.gox:1
func (this *MCPApp) MainEntry() {
//line demo/resource/main_mcp.gox:1:1
	this.Server("Resource Demo ðŸš€", "1.0.0")
}
func (this *MCPApp) Main() {
	_gop_obj0 := &readme{MCPApp: this}
	_gop_obj1 := &user_profile{MCPApp: this}
	_gop_lst0 := []server.ResourceProto{_gop_obj0, _gop_obj1}
	server.Gopt_MCPApp_Main(this, _gop_lst0, nil, nil)
}
//line demo/resource/readme_res.gox:5
func (this *readme) Main(_gop_arg0 context.Context, _gop_arg1 mcp.ReadResourceRequest, _gop_arg2 *server.ResourceAppProto) []mcp.ResourceContents {
	this.ResourceApp.Main(_gop_arg0, _gop_arg1, _gop_arg2)
//line demo/resource/readme_res.gox:5:1
	this.Resource("docs://readme", "Project README", func() {
//line demo/resource/readme_res.gox:6:1
		this.Description("The project's README file")
//line demo/resource/readme_res.gox:7:1
		this.MimeType("text/markdown")
	})
//line demo/resource/readme_res.gox:10:1
	data := func() (_gop_ret []byte) {
//line demo/resource/readme_res.gox:10:1
		var _gop_err error
//line demo/resource/readme_res.gox:10:1
		_gop_ret, _gop_err = os.ReadFile("README.md")
//line demo/resource/readme_res.gox:10:1
		if _gop_err != nil {
//line demo/resource/readme_res.gox:10:1
			_gop_err = errors.NewFrame(_gop_err, "os.readFile(\"README.md\")", "demo/resource/readme_res.gox", 10, "main.Main")
//line demo/resource/readme_res.gox:10:1
			panic(_gop_err)
		}
//line demo/resource/readme_res.gox:10:1
		return
	}()
//line demo/resource/readme_res.gox:12:1
	return []mcp.ResourceContents{server.Content__3(&server.TextResourceByteContents{URI: "docs://readme", MIMEType: "text/markdown", Text: data})}
}
func (this *readme) Classclone() server.ResourceProto {
	_gop_ret := *this
	return &_gop_ret
}
//line demo/resource/user_profile_res.gox:3:1
// Your DB/API call here
func (this *user_profile) getUserProfile(userID string) (interface{}, error) {
//line demo/resource/user_profile_res.gox:5:1
	return map[string]interface{}{"name": "Ken", "age": 15, "id": userID}, nil
}
//line demo/resource/user_profile_res.gox:10
func (this *user_profile) Main(_gop_arg0 context.Context, _gop_arg1 mcp.ReadResourceRequest, _gop_arg2 *server.ResourceAppProto) []mcp.ResourceContents {
	this.ResourceApp.Main(_gop_arg0, _gop_arg1, _gop_arg2)
//line demo/resource/user_profile_res.gox:10:1
	this.Resource("users://{id}/profile", "User Profile", func() {
//line demo/resource/user_profile_res.gox:11:1
		this.Description("Returns user profile information")
//line demo/resource/user_profile_res.gox:12:1
		this.MimeType("application/json")
	})
//line demo/resource/user_profile_res.gox:15:1
	userID, ok := this.Gop_Env("id").(string)
//line demo/resource/user_profile_res.gox:16:1
	if !ok {
//line demo/resource/user_profile_res.gox:17:1
		panic("user id is required")
	}
//line demo/resource/user_profile_res.gox:20:1
	profile := func() (_gop_ret interface{}) {
//line demo/resource/user_profile_res.gox:20:1
		var _gop_err error
//line demo/resource/user_profile_res.gox:20:1
		_gop_ret, _gop_err = this.getUserProfile(userID)
//line demo/resource/user_profile_res.gox:20:1
		if _gop_err != nil {
//line demo/resource/user_profile_res.gox:20:1
			_gop_err = errors.NewFrame(_gop_err, "getUserProfile(userID)", "demo/resource/user_profile_res.gox", 20, "main.Main")
//line demo/resource/user_profile_res.gox:20:1
			panic(_gop_err)
		}
//line demo/resource/user_profile_res.gox:20:1
		return
	}()
//line demo/resource/user_profile_res.gox:22:1
	return []mcp.ResourceContents{server.Content__2(&server.JsonResourceContents{URI: this.RequestURI(), JSON: profile})}
}
func (this *user_profile) Classclone() server.ResourceProto {
	_gop_ret := *this
	return &_gop_ret
}
func main() {
	new(MCPApp).Main()
}
