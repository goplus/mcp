import "time"

tool "longRunningOperation", => {
	description "Demonstrates a long running operation with progress updates"
	float "duration", => {
		description "Duration of the operation in seconds"
		defval 10
	}
	float "steps", => {
		description "Number of steps in the operation"
		defval 5
	}
}

progressToken := metaProgressToken

duration, ok := ${duration}.(float64)
if !ok {
	duration = 10
}

steps, ok := ${steps}.(float64)
if !ok {
	steps = 5
}

stepDuration := time.Duration((duration / steps) * float64(time.Second))
n := int(steps)

for i := 0; i < n; i++ {
	time.sleep stepDuration
	if progressToken != nil {
		notify "notifications/progress", {
			"progress":      i + 1,
			"total":         n,
			"progressToken": progressToken,
		}
	}
}

return text("Long running operation completed. Duration: ${duration} seconds, Steps: ${n}.")
