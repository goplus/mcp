// Code generated by gop (Go+); DO NOT EDIT.

package main

import (
	"context"
	"github.com/goplus/mcp/server"
	"github.com/mark3labs/mcp-go/mcp"
	"github.com/qiniu/x/stringutil"
	"strconv"
	"time"
)

const _ = true

type longrun struct {
	server.ToolApp
	*MCPApp
}
type MCPApp struct {
	server.MCPApp
}
//line demo/longruntool/main_mcp.gox:1
func (this *MCPApp) MainEntry() {
//line demo/longruntool/main_mcp.gox:1:1
	this.Server("Long Running Operation ðŸš€", "1.0.0")
}
func (this *MCPApp) Main() {
	server.Gopt_MCPApp_Main(this, nil, []server.ToolProto{new(longrun)}, nil)
}
//line demo/longruntool/longrun_tool.gox:3
func (this *longrun) Main(_gop_arg0 context.Context, _gop_arg1 mcp.CallToolRequest, _gop_arg2 *server.ToolAppProto) mcp.Content {
	this.ToolApp.Main(_gop_arg0, _gop_arg1, _gop_arg2)
//line demo/longruntool/longrun_tool.gox:3:1
	this.Tool("longRunningOperation", func() {
//line demo/longruntool/longrun_tool.gox:4:1
		this.Description("Demonstrates a long running operation with progress updates")
//line demo/longruntool/longrun_tool.gox:5:1
		this.Float("duration", func() {
//line demo/longruntool/longrun_tool.gox:6:1
			this.Description("Duration of the operation in seconds")
//line demo/longruntool/longrun_tool.gox:7:1
			this.Defval__1(10)
		})
//line demo/longruntool/longrun_tool.gox:9:1
		this.Float("steps", func() {
//line demo/longruntool/longrun_tool.gox:10:1
			this.Description("Number of steps in the operation")
//line demo/longruntool/longrun_tool.gox:11:1
			this.Defval__1(5)
		})
	})
//line demo/longruntool/longrun_tool.gox:15:1
	progressToken := this.MetaProgressToken()
//line demo/longruntool/longrun_tool.gox:17:1
	duration, ok := this.Gop_Env("duration").(float64)
//line demo/longruntool/longrun_tool.gox:18:1
	if !ok {
//line demo/longruntool/longrun_tool.gox:19:1
		duration = 10
	}
//line demo/longruntool/longrun_tool.gox:22:1
	steps, ok := this.Gop_Env("steps").(float64)
//line demo/longruntool/longrun_tool.gox:23:1
	if !ok {
//line demo/longruntool/longrun_tool.gox:24:1
		steps = 5
	}
//line demo/longruntool/longrun_tool.gox:27:1
	stepDuration := time.Duration(duration / steps * float64(time.Second))
//line demo/longruntool/longrun_tool.gox:28:1
	n := int(steps)
//line demo/longruntool/longrun_tool.gox:30:1
	for
//line demo/longruntool/longrun_tool.gox:30:1
	i := 0; i < n;
//line demo/longruntool/longrun_tool.gox:30:1
	i++ {
//line demo/longruntool/longrun_tool.gox:31:1
		time.Sleep(stepDuration)
//line demo/longruntool/longrun_tool.gox:32:1
		if progressToken != nil {
//line demo/longruntool/longrun_tool.gox:33:1
			this.Notify("notifications/progress", map[string]any{"progress": i + 1, "total": n, "progressToken": progressToken})
		}
	}
//line demo/longruntool/longrun_tool.gox:41:1
	return server.Text__0(stringutil.Concat("Long running operation completed. Duration: ", strconv.FormatFloat(duration, 'g', -1, 64), " seconds, Steps: ", strconv.Itoa(n), "."))
}
func (this *longrun) Classclone() server.ToolProto {
	_gop_ret := *this
	return &_gop_ret
}
func main() {
//line demo/longruntool/longrun_tool.gox:41:1
	new(MCPApp).Main()
}
