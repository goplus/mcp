// Code generated by gop (Go+); DO NOT EDIT.

package main

import (
	"context"
	"github.com/goplus/mcp/server"
	"github.com/mark3labs/mcp-go/mcp"
	"github.com/qiniu/x/stringutil"
)

const _ = true

type code_review struct {
	server.PromptApp
	*MCPApp
}
type greeting struct {
	server.PromptApp
	*MCPApp
}
type MCPApp struct {
	server.MCPApp
}
//line demo/prompt/main_mcp.gox:1
func (this *MCPApp) MainEntry() {
//line demo/prompt/main_mcp.gox:1:1
	this.Server("Prompt Demo ðŸš€", "1.0.0")
}
func (this *MCPApp) Main() {
	server.Gopt_MCPApp_Main(this, nil, nil, []server.PromptProto{new(code_review), new(greeting)})
}
//line demo/prompt/code_review_prompt.gox:1
func (this *code_review) Main(_gop_arg0 context.Context, _gop_arg1 mcp.GetPromptRequest, _gop_arg2 *server.PromptAppProto) (string, []mcp.PromptMessage) {
	this.PromptApp.Main(_gop_arg0, _gop_arg1, _gop_arg2)
//line demo/prompt/code_review_prompt.gox:1:1
	this.Prompt__0("codeReview", func() {
//line demo/prompt/code_review_prompt.gox:2:1
		this.Description("Code review assistance")
//line demo/prompt/code_review_prompt.gox:3:1
		this.Arg("prNumber", func() {
//line demo/prompt/code_review_prompt.gox:4:1
			this.Required()
//line demo/prompt/code_review_prompt.gox:5:1
			this.Description("Pull request number to review")
		})
	})
//line demo/prompt/code_review_prompt.gox:9:1
	prNumber := this.Gop_Env("prNumber")
//line demo/prompt/code_review_prompt.gox:10:1
	if prNumber == "" {
//line demo/prompt/code_review_prompt.gox:11:1
		panic("prNumber is required")
	}
//line demo/prompt/code_review_prompt.gox:14:1
	return "Code review assistance", []mcp.PromptMessage{this.Prompt__1(server.RoleUser, server.Text__0("You are a helpful code reviewer. Review the changes and provide constructive feedback.")), this.Prompt__1(server.RoleAssistant, server.Embedded__0(&mcp.TextResourceContents{URI: stringutil.Concat("git://pulls/", prNumber, "/diff"), MIMEType: "text/x-diff", Text: "diff"}))}
}
func (this *code_review) Classclone() server.PromptProto {
	_gop_ret := *this
	return &_gop_ret
}
//line demo/prompt/greeting_prompt.gox:1
func (this *greeting) Main(_gop_arg0 context.Context, _gop_arg1 mcp.GetPromptRequest, _gop_arg2 *server.PromptAppProto) (string, []mcp.PromptMessage) {
	this.PromptApp.Main(_gop_arg0, _gop_arg1, _gop_arg2)
//line demo/prompt/greeting_prompt.gox:1:1
	this.Prompt__0("greeting", func() {
//line demo/prompt/greeting_prompt.gox:2:1
		this.Description("A friendly greeting prompt")
//line demo/prompt/greeting_prompt.gox:3:1
		this.Arg("name", func() {
//line demo/prompt/greeting_prompt.gox:4:1
			this.Description("Name of the person to greet")
		})
	})
//line demo/prompt/greeting_prompt.gox:8:1
	name := this.Gop_Env("name")
//line demo/prompt/greeting_prompt.gox:9:1
	if name == "" {
//line demo/prompt/greeting_prompt.gox:10:1
		name = "friend"
	}
//line demo/prompt/greeting_prompt.gox:13:1
	return "A friendly greeting", []mcp.PromptMessage{this.Prompt__1(server.RoleAssistant, server.Text__0(stringutil.Concat("Hello, ", name, "! How can I help you today?")))}
}
func (this *greeting) Classclone() server.PromptProto {
	_gop_ret := *this
	return &_gop_ret
}
func main() {
//line demo/prompt/greeting_prompt.gox:13:1
	new(MCPApp).Main()
}
